@page
@model ListLife.Pages.CreateNewShoppingList
@{
}

<h1 id="CNSL-header">Create new shopping list</h1>

<section class="shopping-container">
    <!-- Left section: Input form -->
    <section class="shopping-form">
        <form method="post" id="createListForm">
            <fieldset>

                <div>
                    <label asp-for="ShoppingList.Title">Shoppinglist title:</label>
                    <input asp-for="ShoppingList.Title" id="listTitleInput" class="form-control" placeholder="Listname" required />
                </div>

                <div>
                    <label>Category:</label>
                    <select id="category" class="form-control" required>
                        <option value="">--Select Category--</option>
                        <option value="FruitsVegetables">Fruits & Vegetables</option>
                        <option value="Fridge">Fridge items</option>
                        <option value="Freezer">Freezer items</option>
                        <option value="Pantry">Pantry items</option>
                        <option value="Hygiene">Hygiene items</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <div>
                    <label>Product:</label>
                    <input id="product" class="form-control" placeholder="Product" required />
                </div>

                <div>
                    <label>Amount:</label>
                    <input type="number" id="amount" class="form-control" min="1" step="1" required />
                </div>

                <!-- Container for hidden fields that send product data to the backend -->
                <div id="productListContainer"></div>
            </fieldset>

            <nav class="button-group">
                <button type="button" id="addToList" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Add to list
                </button>

                <!-- When clicking "Create Shoppinglist", "required" is removed from the product fields -->
                <button type="submit" class="btn btn-success" id="createListButton">
                    <i class="bi bi-save"></i> Create shopping list
                </button>

                <button type="button" class="btn btn-danger" onclick="window.location.href='/MyPage'">
                    <i class="bi bi-x-circle"></i> Cancel
                </button>
            </nav>
        </form>
    </section>

    <!-- Right section: Real-time display of the shopping list -->
    <section class="shopping-list">
        <h2>Your shoppinglist:<span id="listTitleDisplay"></span></h2>
        <ul id="shoppingList"></ul>
    </section>

    <!-- Sidebar: Recently Purchased -->
    <section class="recently-purchased">
        <h3>Recently bought</h3>
        <ul id="recentlyPurchasedList">
            @foreach (var product in Model.RecentlyPurchasedProducts)
            {
                <li class="recently-purchased-item" draggable="true"
                    data-category="@product.Category"
                    data-name="@product.Name"
                    data-amount="@product.Amount">
                    <strong>@product.Category:</strong> @product.Name (@product.Amount)
                </li>
            }
        </ul>
    </section>
</section>

<script>
    let shoppingList = [];

    // When clicking "Add to list": Check that the fields are filled in and add the product
    document.getElementById("addToList").addEventListener("click", function () {
      let category = document.getElementById("category").value;
      let product = document.getElementById("product").value;
      let amount = document.getElementById("amount").value;
      let listTitle = document.getElementById("listTitleInput").value.trim();

      // Check that all fields are filled in
      if (!category || !product || !amount) {
        alert("Please fill in all fields!");
        return;
      }

      // If it is the first product added, set the list name in the view
      if (shoppingList.length === 0 && listTitle !== "") {
        document.getElementById("listTitleDisplay").textContent = " " + listTitle;
      }

      let newItem = {
        Category: category,
        Name: product,
        Amount: amount
      };

      shoppingList.push(newItem);
      updateShoppingListUI();
      updateProductFields();

      // Clear the input fields after the product is added
      document.getElementById("product").value = "";
      document.getElementById("amount").value = "";
      document.getElementById("category").value = "";
    });

    // Update the visual list of products
    function updateShoppingListUI() {
      let shoppingListEl = document.getElementById("shoppingList");
      shoppingListEl.innerHTML = "";

      shoppingList.forEach((item, index) => {
        let li = document.createElement("li");
        li.classList.add("shopping-list-item");
        li.innerHTML = `
          <div class="list-item">
            <span class="item-text"><strong>${item.Category}:</strong> ${item.Name} (${item.Amount})</span>
            <button class="btn btn-sm btn-danger remove-item" data-index="${index}">
              <i class="bi bi-trash"></i>
            </button>
          </div>`;
        shoppingListEl.appendChild(li);
      });

      // Add event handler to remove products
      document.querySelectorAll(".remove-item").forEach(button => {
        button.addEventListener("click", function () {
          let index = this.getAttribute("data-index");
          shoppingList.splice(index, 1);
          updateShoppingListUI();
          updateProductFields();
        });
      });
    }

    /// Update hidden fields with product data to send to backend
    function updateProductFields() {
      let productListContainer = document.getElementById("productListContainer");
      productListContainer.innerHTML = "";

      shoppingList.forEach((item, index) => {
        productListContainer.innerHTML += `
          <input type="hidden" name="Products[${index}].Category" value="${item.Category}" />
          <input type="hidden" name="Products[${index}].Name" value="${item.Name}" />
          <input type="hidden" name="Products[${index}].Amount" value="${item.Amount}" />
        `;
      });
    }

    // Make "Recently purchased" products draggable
    document.querySelectorAll(".recently-purchased-item").forEach(item => {
      item.addEventListener("dragstart", function (event) {
        event.dataTransfer.setData("category", this.getAttribute("data-category"));
        event.dataTransfer.setData("name", this.getAttribute("data-name"));
        event.dataTransfer.setData("amount", this.getAttribute("data-amount"));
      });
    });

    // Make the shopping list a droppable surface
    let shoppingListEl = document.getElementById("shoppingList");
    shoppingListEl.addEventListener("dragover", function (event) {
      event.preventDefault();
    });
    shoppingListEl.addEventListener("drop", function (event) {
      event.preventDefault();
      let category = event.dataTransfer.getData("category");
      let name = event.dataTransfer.getData("name");
      let amount = event.dataTransfer.getData("amount");

      if (!category || !name || !amount) return;

      let newItem = { Category: category, Name: name, Amount: amount };
      shoppingList.push(newItem);
      updateShoppingListUI();
      updateProductFields();
    });

    // When clicking "Create Shoppinglist", "required" is removed from the product fields so that the form can be submitted even if they are empty
    document.getElementById("createListButton").addEventListener("click", function () {
      document.getElementById("product").removeAttribute("required");
      document.getElementById("amount").removeAttribute("required");
      document.getElementById("category").removeAttribute("required");
    });
</script>

<script>
    document.getElementById("createListForm").addEventListener("submit", function () {
        setTimeout(() => {
            document.querySelectorAll("#createListForm input, #createListForm select").forEach(input => {
                if (input.type !== "hidden") { // Don't clear hidden fields like List ID
                    input.value = "";
                }
            });
        }, 100);
    });
</script>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #2c2c2c;
        color: white;
    }

    /* Styles for the layout */
    .container {
        display: flex;
        justify-content: space-between;
        max-width: 1200px;
        margin: auto;
        padding: 0;
    }

    a.navbar-brand {
      margin:0;
    }

    #CNSL-header {
        text-align: center;
        margin-bottom: 40px;
    }
   
    .shopping-container {
        display: flex;
        justify-content: space-between;
        max-width: 900px;
        margin: auto;
    }

    .shopping-form {
        width: 58%;
    }

    .shopping-list {
        background-color: pink;
        padding: 15px;
        border-radius: 8px;
        width: 40%;
        color: black;
        font-size: 14px;
        overflow-y: auto;
        max-height: 280px;
        word-wrap: break-word;
    }

        .shopping-list h2 {
            font-size: 18px; 
            text-align: center;
            line-height: 1.2;
            white-space: normal; 
            word-wrap: break-word; 
            overflow: hidden;
            max-width: 100%; 
            padding: 5px; 
        }

    /* Adjusts each product in the shopping list */
    .shopping-list-item {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Make sure the text and button are positioned correctly */
        padding: 5px;
        border-bottom: 1px solid #ccc;
    }

    /* Adjusts the text position */
    .list-item {
        display: flex;
        align-items: center;
        justify-content: flex-start; /* All products on the left side */
        width: 100%;
    }

    /* Adjusts the product text placement */
    .item-text {
        font-size: 14px;
        word-wrap: break-word;
        overflow: hidden;
        text-overflow: ellipsis;
        flex-grow: 1;
    }

    .button-group {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .shopping-list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px;
        border-bottom: 1px solid #ccc;
    }  

    .remove-item {
        background-color: red;
        color: white;
        border: none;
        padding: 5px;
        border-radius: 5px;
        cursor: pointer;
    }

    /* Recently Purchased-stil */
    .recently-purchased {
        width: 180px; /* Narrow down the list */
        background-color: #2a2a2a;
        padding: 8px;
        border-radius: 8px;
        overflow-y: auto;
        max-height: 280px;
        font-size: 13px;
        color: white;
        border: 1px solid #444; /* Gentle border */
    }

        /* Adjust title size */
        .recently-purchased h3 {
            margin: 0;
            font-size: 14px;
            text-align: center;
        }

    /* Individual product boxes */
    .recently-purchased-item {
        padding: 6px;
        background-color: #3b3b3b;
        border-radius: 5px;
        cursor: grab;
        margin-bottom: 4px;
        transition: background-color 0.2s;
    }

        .recently-purchased-item:hover {
            background-color: #555;
        }

    /* Adjust layout for better spacing */
    .shopping-container {
        display: flex;
        justify-content: space-between;
        max-width: 900px;
        margin: auto;
        gap: 20px; /* Creates more air between the sections */
    }

    /* Make sure the shopping list and Recently Purchased have the same height */
    .shopping-list, .recently-purchased {
        flex: 1;
        min-height: 280px;
    }

</style>